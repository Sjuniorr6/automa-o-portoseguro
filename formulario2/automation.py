"""
M√≥dulo de Automa√ß√£o Selenium para Porto Seguro Corretor
=======================================================

Este m√≥dulo fornece funcionalidades de automa√ß√£o para interagir com o
sistema Corretor Online da Porto Seguro usando Selenium WebDriver.

Funcionalidades:
- Abertura autom√°tica do navegador
- Navega√ß√£o para o Corretor Online
- Execu√ß√£o de a√ß√µes automatizadas
- Manuten√ß√£o do navegador aberto para uso manual
"""

import logging
import time
import json
import os
from datetime import datetime
from typing import Optional, Dict, Any

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

from .automation_config import URLS, BEHAVIOR, TIMING, CHROME_OPTIONS, TEST_DATA

# Configura√ß√£o do logger
logger = logging.getLogger(__name__)

# Constantes
PORTO_SEGURO_URL = "https://corretor.portoseguro.com.br/portal/site/corretoronline/template.LOGIN/"
DEFAULT_WAIT_TIME = 10
INFINITE_LOOP_DELAY = 1


class AutomationManager:
    """
    Gerenciador principal da automa√ß√£o Selenium.
    
    Respons√°vel por coordenar todas as opera√ß√µes de automa√ß√£o,
    incluindo configura√ß√£o do driver, execu√ß√£o de a√ß√µes e
    gerenciamento do ciclo de vida do navegador.
    """
    
    def __init__(self, form_data: Optional[Dict[str, Any]] = None):
        """
        Inicializa o gerenciador de automa√ß√£o.
        
        Args:
            form_data: Dados do formul√°rio para usar na automa√ß√£o
        """
        self.form_data = form_data or TEST_DATA
        self.driver = None
        self._is_running = False
    
    def setup_driver(self) -> bool:
        """
        Configura o driver do Chrome com as op√ß√µes especificadas.
        
        Returns:
            bool: True se a configura√ß√£o foi bem-sucedida, False caso contr√°rio
        """
        try:
            logger.info("üîß Configurando driver do Chrome...")
            
            chrome_options = Options()
            
            # Aplicar configura√ß√µes do automation_config.py
            if CHROME_OPTIONS.get('no_sandbox'):
                chrome_options.add_argument("--no-sandbox")
            if CHROME_OPTIONS.get('disable_dev_shm_usage'):
                chrome_options.add_argument("--disable-dev-shm-usage")
            if CHROME_OPTIONS.get('disable_gpu'):
                chrome_options.add_argument("--disable-gpu")
            if CHROME_OPTIONS.get('window_size'):
                chrome_options.add_argument(f"--window-size={CHROME_OPTIONS['window_size']}")
            if CHROME_OPTIONS.get('headless'):
                chrome_options.add_argument("--headless")
            
            # Configura√ß√µes para modo inc√≥gnito/an√¥nimo
            chrome_options.add_argument("--incognito")
            chrome_options.add_argument("--disable-blink-features=AutomationControlled")
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            
            # Instalar e configurar o ChromeDriver
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            self.driver.implicitly_wait(TIMING.get('element_wait', 10))
            
            # Remover indicadores de automa√ß√£o para stealth
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            self.driver.execute_script("Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]})")
            self.driver.execute_script("Object.defineProperty(navigator, 'languages', {get: () => ['pt-BR', 'pt', 'en-US', 'en']})")
            
            logger.info("‚úÖ Driver do Chrome configurado com sucesso")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao configurar driver: {e}")
            return False
    
    def open_porto_seguro_corretor(self) -> bool:
        """
        Abre o Corretor Online da Porto Seguro e executa a automa√ß√£o.
        
        Returns:
            bool: True se a automa√ß√£o foi bem-sucedida, False caso contr√°rio
        """
        try:
            logger.info("üöÄ Abrindo Corretor Online da Porto Seguro...")
            
            # Navegar para a URL
            self.driver.get(PORTO_SEGURO_URL)
            time.sleep(TIMING.get('page_load_wait', 3))
            
            logger.info("‚úÖ Corretor Online da Porto Seguro aberto com sucesso")
            time.sleep(5)
            
            # Executar a√ß√µes de automa√ß√£o se configurado
            if BEHAVIOR.get('click_porto_button', True):
                self._click_porto_button()
                
                if BEHAVIOR.get('do_login', True):
                    self._perform_login()
                    
                    if BEHAVIOR.get('fill_susep', True):
                        self._fill_susep_field()
            
            logger.info("üéâ Automa√ß√£o do Corretor Online conclu√≠da!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao abrir Corretor Online: {e}")
            return False
    
    def _click_porto_button(self) -> bool:
        """
        Clica no bot√£o espec√≠fico da Porto Seguro.
        
        Returns:
            bool: True se o clique foi bem-sucedido, False caso contr√°rio
        """
        try:
            logger.info("üîç Procurando bot√£o para clicar...")
            
            button = WebDriverWait(self.driver, DEFAULT_WAIT_TIME).until(
                EC.element_to_be_clickable((By.XPATH, "/html/body/div[4]/div[1]/div/div[2]/ul/li/button"))
            )
            
            button.click()
            logger.info("‚úÖ Bot√£o clicado com sucesso!")
            time.sleep(3)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao clicar no bot√£o: {e}")
            return False
    
    def _perform_login(self) -> bool:
        """
        Realiza o login no sistema.
        
        Returns:
            bool: True se o login foi bem-sucedido, False caso contr√°rio
        """
        try:
            logger.info("üîê Iniciando processo de login...")
            
            # Preencher CPF
            logger.info("üîç Aguardando campo de CPF...")
            cpf_field = WebDriverWait(self.driver, 15).until(
                EC.element_to_be_clickable((By.XPATH, '//*[@id="logonPrincipal"]'))
            )
            cpf_field.clear()
            cpf_field.send_keys("140.552.248-85")
            logger.info("‚úÖ CPF preenchido: 140.552.248-85")
            time.sleep(2)
            
            # Preencher senha
            logger.info("üîç Aguardando campo de senha...")
            senha_field = WebDriverWait(self.driver, 15).until(
                EC.element_to_be_clickable((By.XPATH, '//*[@id="liSenha"]/div/input'))
            )
            senha_field.clear()
            senha_field.send_keys("Shaddai2025!")
            logger.info("‚úÖ Senha preenchida")
            time.sleep(2)
            
            # Clicar no bot√£o de login
            logger.info("üîç Aguardando bot√£o de login...")
            login_button = WebDriverWait(self.driver, 15).until(
                EC.element_to_be_clickable((By.XPATH, '//*[@id="inputLogin"]'))
            )
            login_button.click()
            logger.info("‚úÖ Bot√£o de login clicado!")
            
            time.sleep(5)
            logger.info("üéâ Processo de login conclu√≠do!")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro durante login: {e}")
            return False
    
    def _fill_susep_field(self) -> bool:
        """
        Preenche o campo SUSEP e clica no elemento espec√≠fico usando JavaScript.
        
        Returns:
            bool: True se o preenchimento foi bem-sucedido, False caso contr√°rio
        """
        try:
            logger.info("üìã Preenchendo campo SUSEP...")
            
            # Aguardar o campo SUSEP ficar clic√°vel
            logger.info("üîç Aguardando campo SUSEP...")
            susep_field = WebDriverWait(self.driver, 15).until(
                EC.element_to_be_clickable((By.XPATH, '//*[@id="susepsAutocomplete"]'))
            )
            
            # Preencher SUSEP
            susep_field.clear()
            susep_field.send_keys("BA6QXJ (P)")
            logger.info("‚úÖ Campo SUSEP preenchido: BA6QXJ (P)")
            time.sleep(2)
            
            # Aguardar o bot√£o avan√ßar ficar clic√°vel
            logger.info("üîç Aguardando bot√£o avan√ßar...")
            avancar_button = WebDriverWait(self.driver, 15).until(
                EC.element_to_be_clickable((By.XPATH, '//*[@id="btnAvancarSusep"]'))
            )
            
            # Clicar no bot√£o avan√ßar
            avancar_button.click()
            logger.info("‚úÖ Bot√£o avan√ßar clicado!")
            time.sleep(3)
            
            logger.info("üéâ Processo SUSEP conclu√≠do!")
            
            # PULAR ETAPAS INTERMEDI√ÅRIAS E IR DIRETO AO REDIRECIONAMENTO
            logger.info("üéØ Pulando etapas intermedi√°rias e indo direto ao redirecionamento...")
            
            # Aguardar um pouco para a p√°gina carregar
            time.sleep(5)
            logger.info("‚úÖ Pronto para redirecionamento direto!")
            
            # PRIMEIRO: Redirecionar para o link da Gest√£o de Ap√≥lice
            logger.info("üéØ PRIMEIRO: Redirecionando para o link da Gest√£o de Ap√≥lice...")
            
            # URL direta da Gest√£o de Ap√≥lice (simplificada para teste)
            gestao_apolice_url = "https://wwws.portoseguro.com.br/react-spa-saud-pbko-administracao-de-apolices/"
            logger.info(f"üìç Navegando para: {gestao_apolice_url}")
            
            try:
                # Fazer o redirecionamento
                self.driver.get(gestao_apolice_url)
                time.sleep(20)  # Aguardar mais tempo para carregamento
                
                logger.info(f"üìç URL atual: {self.driver.current_url}")
                logger.info(f"üìç T√≠tulo da p√°gina: {self.driver.title}")
                
                # Verificar se a p√°gina carregou
                page_source = self.driver.page_source
                if "Escolha o contrato" in page_source:
                    logger.info("‚úÖ P√°gina carregou corretamente - encontrou 'Escolha o contrato'")
                else:
                    logger.warning("‚ö†Ô∏è P√°gina pode n√£o ter carregado completamente")
                    logger.info("üîç Tentando encontrar qualquer texto na p√°gina...")
                    try:
                        body = self.driver.find_element(By.TAG_NAME, "body")
                        logger.info(f"‚úÖ Body encontrado, conte√∫do: {body.text[:500]}...")
                    except Exception as body_error:
                        logger.error(f"‚ùå Erro ao encontrar body: {body_error}")
                
                # SEGUNDO: Aceitar qualquer pop-up que apare√ßa
                logger.info("üéØ SEGUNDO: Aceitando qualquer pop-up...")
                
                # Aguardar um pouco para a p√°gina carregar
                time.sleep(5)
                
                # ACEITAR QUALQUER POP-UP AUTOMATICAMENTE
                try:
                    logger.info("üîç Procurando e aceitando qualquer pop-up...")
                    js_script = """
                    // Aceitar qualquer pop-up que apare√ßa
                    var buttons = document.querySelectorAll('button');
                    var clicked = false;
                    
                    for (var i = 0; i < buttons.length; i++) {
                        var button = buttons[i];
                        var text = button.textContent.toLowerCase();
                        
                        // Aceitar qualquer bot√£o que pare√ßa ser de confirma√ß√£o
                        if (text.includes('ok') || 
                            text.includes('entendi') || 
                            text.includes('fechar') || 
                            text.includes('aceitar') || 
                            text.includes('confirmar') || 
                            text.includes('continuar') || 
                            text.includes('prosseguir') ||
                            text.includes('sim') ||
                            text.includes('yes') ||
                            text.includes('close') ||
                            text.includes('accept') ||
                            text.includes('confirm') ||
                            text.includes('continue')) {
                            button.click();
                            clicked = true;
                            break;
                        }
                    }
                    
                    // Se n√£o encontrou bot√£o espec√≠fico, clicar no primeiro bot√£o vis√≠vel
                    if (!clicked) {
                        for (var i = 0; i < buttons.length; i++) {
                            var button = buttons[i];
                            var style = window.getComputedStyle(button);
                            if (style.display !== 'none' && style.visibility !== 'hidden') {
                                button.click();
                                clicked = true;
                                break;
                            }
                        }
                    }
                    
                    return clicked ? 'Pop-up aceito automaticamente' : 'Nenhum pop-up encontrado';
                    """
                    result = self.driver.execute_script(js_script)
                    logger.info(f"‚úÖ Resultado: {result}")
                    
                    # Aguardar o pop-up fechar
                    time.sleep(3)
                    
                except Exception as popup_error:
                    logger.warning(f"‚ö†Ô∏è Erro ao aceitar pop-up: {popup_error}")
                
                # TERCEIRO: Agora procurar o campo e preencher
                logger.info("üéØ TERCEIRO: Procurando campo para preencher...")
                
                # Aguardar mais um pouco para a p√°gina carregar
                time.sleep(5)
                
                try:
                    # ESTRAT√âGIA AGRESSIVA: Procurar por qualquer campo que possa ser preenchido
                    logger.info("üéØ ESTRAT√âGIA AGRESSIVA: Procurando por qualquer campo preench√≠vel...")
                    
                    # 1. Tentar encontrar pelo placeholder "Estipulante"
                    try:
                        estipulante_input = self.driver.find_element(By.XPATH, "//input[@placeholder='Estipulante']")
                        logger.info("‚úÖ Campo 'Estipulante' encontrado pelo placeholder!")
                        
                        # Preencher o campo com JavaScript
                        js_script = """
                        var input = document.querySelector('input[placeholder="Estipulante"]');
                        if (input) {
                            input.value = '60146757';
                            input.dispatchEvent(new Event('input', { bubbles: true }));
                            input.dispatchEvent(new Event('change', { bubbles: true }));
                            input.dispatchEvent(new Event('blur', { bubbles: true }));
                            return 'Campo Estipulante preenchido com 60146757';
                        } else {
                            return 'Campo Estipulante n√£o encontrado';
                        }
                        """
                        
                        result = self.driver.execute_script(js_script)
                        logger.info(f"‚úÖ JavaScript executado: {result}")
                        logger.info("üõë Automa√ß√£o conclu√≠da - campo Estipulante preenchido!")
                        return True
                        
                    except Exception as estipulante_error:
                        logger.warning(f"‚ö†Ô∏è N√£o conseguiu encontrar pelo placeholder: {estipulante_error}")
                    
                    # 2. Tentar encontrar qualquer input na p√°gina
                    all_inputs = self.driver.find_elements(By.TAG_NAME, "input")
                    logger.info(f"üìã Encontrados {len(all_inputs)} inputs na p√°gina")
                    
                    if len(all_inputs) > 0:
                        # Listar todos os inputs encontrados
                        for i, input_elem in enumerate(all_inputs):
                            input_id = input_elem.get_attribute('id')
                            input_type = input_elem.get_attribute('type')
                            input_placeholder = input_elem.get_attribute('placeholder')
                            input_class = input_elem.get_attribute('class')
                            input_name = input_elem.get_attribute('name')
                            
                            logger.info(f"üìã Input {i+1}: ID='{input_id}', Type='{input_type}', Placeholder='{input_placeholder}', Class='{input_class}', Name='{input_name}'")
                        
                        # 3. Tentar preencher o PRIMEIRO input (mais prov√°vel de ser o campo de busca)
                        logger.info("üéØ Tentando preencher o PRIMEIRO input encontrado...")
                        
                        js_script = """
                        var inputs = document.getElementsByTagName('input');
                        if (inputs.length > 0) {
                            // Focar no primeiro input
                            inputs[0].focus();
                            // Limpar o campo
                            inputs[0].value = '';
                            // Preencher com o valor
                            inputs[0].value = '60146757';
                            // Disparar eventos
                            inputs[0].dispatchEvent(new Event('input', { bubbles: true }));
                            inputs[0].dispatchEvent(new Event('change', { bubbles: true }));
                            inputs[0].dispatchEvent(new Event('blur', { bubbles: true }));
                            return 'Primeiro input preenchido com 60146757';
                        } else {
                            return 'Nenhum input encontrado';
                        }
                        """
                        
                        result = self.driver.execute_script(js_script)
                        logger.info(f"‚úÖ JavaScript executado: {result}")
                        logger.info("üõë Automa√ß√£o conclu√≠da - primeiro input preenchido!")
                        return True
                        
                    else:
                        logger.warning("‚ö†Ô∏è Nenhum input encontrado na p√°gina")
                        
                        # 4. Tentar encontrar outros tipos de campos (textarea, etc.)
                        all_textareas = self.driver.find_elements(By.TAG_NAME, "textarea")
                        logger.info(f"üìã Encontrados {len(all_textareas)} textareas na p√°gina")
                        
                        if len(all_textareas) > 0:
                            logger.info("üéØ Tentando preencher o primeiro textarea...")
                            
                            js_script = """
                            var textareas = document.getElementsByTagName('textarea');
                            if (textareas.length > 0) {
                                textareas[0].value = '60146757';
                                textareas[0].dispatchEvent(new Event('input', { bubbles: true }));
                                textareas[0].dispatchEvent(new Event('change', { bubbles: true }));
                                return 'Primeiro textarea preenchido com 60146757';
                            } else {
                                return 'Nenhum textarea encontrado';
                            }
                            """
                            
                            result = self.driver.execute_script(js_script)
                            logger.info(f"‚úÖ JavaScript executado: {result}")
                            logger.info("üõë Automa√ß√£o conclu√≠da - primeiro textarea preenchido!")
                            return True
                        
                        logger.info("üõë Automa√ß√£o conclu√≠da - nenhum campo encontrado")
                        return False
                    
                    return True
                    
                except Exception as field_error:
                    logger.error(f"‚ùå Erro ao procurar campos: {field_error}")
                    logger.info("üõë Automa√ß√£o conclu√≠da - erro na busca")
                    return False
                
            except Exception as redirect_error:
                logger.error(f"‚ùå Erro ao redirecionar: {redirect_error}")
                logger.info("üõë Automa√ß√£o conclu√≠da - erro no redirecionamento")
                return False
                
            except Exception as e:
                logger.error(f"‚ùå Erro ao redirecionar diretamente: {e}")
                logger.info("üîÑ Tentando m√©todos alternativos...")
                
                # Tentar com JavaScript como fallback
                try:
                    logger.info("üîç Tentando redirecionamento via JavaScript...")
                    js_redirect = f"window.location.href = '{gestao_apolice_url}';"
                    self.driver.execute_script(js_redirect)
                    time.sleep(15)
                    logger.info(f"üìç URL ap√≥s JavaScript: {self.driver.current_url}")
                    
                    # Tentar novamente encontrar o campo ap√≥s JavaScript
                    try:
                        logger.info("üîç Procurando campo de input ap√≥s JavaScript...")
                        clicar_input = self.driver.find_element(By.XPATH, '//*[@id="container_page_mov"]/div/div/div[1]/div/div/label/input')
                        clicar_input.click()
                        clicar_input.send_keys("60146757")
                        logger.info("‚úÖ Campo preenchido com sucesso ap√≥s JavaScript: 60146757")
                        logger.info("üõë Automa√ß√£o conclu√≠da - p√°gina carregada e campo preenchido")
                    except Exception as input_error2:
                        logger.warning(f"‚ö†Ô∏è Erro ao preencher campo ap√≥s JavaScript: {input_error2}")
                        logger.info("üõë Automa√ß√£o conclu√≠da - p√°gina carregada (campo n√£o encontrado)")
                    
                    return True
                    
                except Exception as js_error:
                    logger.error(f"‚ùå Erro no redirecionamento JavaScript: {js_error}")
                    logger.error("‚ùå Falha no redirecionamento para Gest√£o de Ap√≥lice!")
                    logger.info("üõë Automa√ß√£o parada - n√£o foi poss√≠vel acessar a p√°gina")
                    return False
            
        except Exception as e:
            logger.error(f"‚ùå Erro durante preenchimento SUSEP ou clique no elemento: {e}")
            return False
    
    def setup(self) -> bool:
        """
        Configura o ambiente de automa√ß√£o.
        
        Returns:
            bool: True se a configura√ß√£o foi bem-sucedida, False caso contr√°rio
        """
        try:
            logger.info("üîß Configurando ambiente de automa√ß√£o...")
            
            # Configura o driver
            if not self.setup_driver():
                logger.error("‚ùå Falha ao configurar o driver do Chrome")
                return False
            
            logger.info("‚úÖ Ambiente de automa√ß√£o configurado com sucesso")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro durante configura√ß√£o: {e}")
            return False
    
    def execute_automation(self) -> bool:
        """
        Executa a automa√ß√£o principal.
        
        Returns:
            bool: True se a automa√ß√£o foi bem-sucedida, False caso contr√°rio
        """
        try:
            logger.info("üöÄ Iniciando execu√ß√£o da automa√ß√£o...")
            
            # Abre o Corretor Online da Porto Seguro
            success = self.open_porto_seguro_corretor()
            
            if success:
                logger.info("‚úÖ Automa√ß√£o inicial conclu√≠da com sucesso!")
            else:
                logger.warning("‚ö†Ô∏è Automa√ß√£o inicial teve problemas, mas continuando...")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro durante execu√ß√£o da automa√ß√£o: {e}")
            return False
    
    def keep_browser_open(self) -> None:
        """
        Mant√©m o navegador aberto indefinidamente para uso manual.
        
        O navegador permanecer√° aberto at√© que o usu√°rio interrompa
        o processo (Ctrl+C) ou feche a janela manualmente.
        """
        self._is_running = True
        
        logger.info("üåê Navegador permanecer√° aberto para uso manual")
        logger.info("üí° Voc√™ pode continuar trabalhando no sistema manualmente")
        logger.info("üîí Para fechar o navegador, feche a janela manualmente ou use Ctrl+C no console")
        
        try:
            while self._is_running:
                time.sleep(INFINITE_LOOP_DELAY)
                
        except KeyboardInterrupt:
            logger.info("üõë Interrup√ß√£o detectada pelo usu√°rio")
            self._is_running = False
            
        except Exception as e:
            logger.error(f"‚ùå Erro durante execu√ß√£o: {e}")
            self._is_running = False
    
    def cleanup(self) -> None:
        """
        Limpa recursos e fecha o navegador.
        """
        try:
            if self.driver:
                logger.info("üîí Fechando navegador...")
                self.driver.quit()
                logger.info("‚úÖ Driver Selenium encerrado com sucesso")
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao fechar navegador: {e}")
    
    def run(self) -> bool:
        """
        Executa o fluxo completo de automa√ß√£o.
        
        Returns:
            bool: True se todo o processo foi bem-sucedido, False caso contr√°rio
        """
        try:
            # Configura√ß√£o
            if not self.setup():
                return False
            
            # Execu√ß√£o da automa√ß√£o
            if not self.execute_automation():
                return False
            
            # Mant√©m navegador aberto
            self.keep_browser_open()
            
            return True
            
        except Exception as e:
            logger.exception("üí• Erro cr√≠tico durante execu√ß√£o:")
            return False
            
        finally:
            # Limpeza sempre executa
            self.cleanup()


def run_automation_for_form(form_data: Optional[Dict[str, Any]] = None) -> bool:
    """
    Fun√ß√£o principal para executar a automa√ß√£o Selenium.
    
    Esta fun√ß√£o √© chamada pelo comando Django (test_automation.py) ou
    outros triggers para abrir o link do Porto Seguro Corretor via Selenium.
    O navegador permanecer√° aberto at√© interven√ß√£o manual.
    
    Args:
        form_data: Dados do formul√°rio para usar na automa√ß√£o
        
    Returns:
        bool: True se a automa√ß√£o foi bem-sucedida, False caso contr√°rio
    """
    logger.info("ü§ñ Iniciando automa√ß√£o Selenium para Porto Seguro Corretor")
    
    # Cria e executa o gerenciador de automa√ß√£o
    manager = AutomationManager(form_data)
    success = manager.run()
    
    if success:
        logger.info("üéâ Automa√ß√£o conclu√≠da com sucesso!")
    else:
        logger.error("üí• Falha na execu√ß√£o da automa√ß√£o")
    
    return success


def acessar_o_corretor_online(driver: webdriver.Chrome) -> bool:
    """
    Fun√ß√£o utilit√°ria para acessar o corretor online.
    
    Args:
        driver: Inst√¢ncia do WebDriver
        
    Returns:
        bool: True se o bot√£o foi clicado com sucesso, False caso contr√°rio
    """
    try:
        logger.info("üîç Procurando bot√£o do corretor online...")
        
        button = WebDriverWait(driver, DEFAULT_WAIT_TIME).until(
            EC.element_to_be_clickable((By.XPATH, "/html/body/div[1]/div[1]/div/div[2]/ul/li/button"))
        )
        
        button.click()
        logger.info("‚úÖ Bot√£o do corretor online clicado com sucesso!")
        time.sleep(3)
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao clicar no bot√£o do corretor online: {e}")
        return False


# Fun√ß√£o de conveni√™ncia para uso direto
def main():
    """
    Fun√ß√£o de conveni√™ncia para executar a automa√ß√£o diretamente.
    """
    run_automation_for_form()


if __name__ == "__main__":
    main() 